# -*- coding: utf-8 -*-
"""FileGEEMAP_TamanNasionalGunungLeuser_FarrasFadhilah.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HFKlWqtfJkCh9Ow5D9wWw9yHDYniCCcP

#**~ TAMAN NASIONAL GUNUNG LEUSER ~**#

By : Farras Fadhilah (2106723565)

##**INTRODUCTION**

Analisis dilakukan untuk Kawasan Taman Nasional Gunung Leuser dengan memanfaatkan GEEMAP Library. Berikut adalah proses-proses utama yang dilakukan dalam analisis ini :    

1. Pengenalan geemap dan Earth Engine Python API:

  - Membuat sebuah peta interaktif menggunakan geemap yang menampilkan lokasi Taman Nasional Gunung Leuser.
  - Menjelaskan secara singkat mengenai geemap dan Earth Engine Python API dalam konteks penggunaannya untuk analisis geospasial.

2. Menciptakan peta interaktif:

  - Menampilkan Taman Nasional Gunung Leuser dengan menggunakan koordinat batas kawasan tersebut. Pastikan peta Anda menunjukkan detail topografi dan vegetasi.

3. Mencari Katalog Data GEE:

  - Mencari dataset pada GEE yang berkaitan dengan tutupan lahan dan penggunaan lahan di Taman Nasional Gunung Leuser dari tahun 2000 hingga 2020. Jelaskan bagaimana Anda menemukan dataset tersebut.

4. Menampilkan Dataset GEE:

  - Memvisualisasikan perubahan tutupan lahan di Taman Nasional Gunung Leuser berdasarkan dataset yang Anda temukan.

5. Mengklasifikasikan Citra Menggunakan Algoritma Machine Learning:

  - Melakukan klasifikasi tutupan lahan menggunakan salah satu algoritma machine learning yang tersedia di GEE. Jelaskan algoritma yang Anda pilih dan mengapa.

6. Menghitung Statistik dan Mengekspor Hasil:

  - Menghitung statistik perubahan tutupan lahan di kawasan tersebut dan ekspor hasilnya dalam format yang dapat dibagikan.

7. Menghasilkan Peta Kualitas Publikasi:

  - Membuat sebuah peta dinamik yang menunjukkan perubahan tutupan lahan di Taman Nasional Gunung Leuser dari tahun 2000 hingga 2020.

8. Mengekstraksi Lebar dan Garis Tengah Sungai:

  - Menggunakan GEE untuk mengekstrak informasi mengenai lebar dan garis tengah dari salah satu sungai utama di Taman Nasional Gunung Leuser. Jelaskan metodologi yang Anda gunakan.

##**PREPARATION**
"""

# Commented out IPython magic to ensure Python compatibility.
# GEEMAP Installation
# %pip install geemap pygis mapclassify

# Import Libraries
import ee
import geemap
import pandas as pd
import matplotlib.pyplot as plt

geemap.ee_initialize()

# Colab Setup
geemap.get_ee_token()

"""##**PROCESSING**

###`1. Pengenalan geemap dan Earth Engine Python API:`

Membuat sebuah peta interaktif menggunakan geemap yang menampilkan lokasi Taman Nasional Gunung Leuser.

Dengan memanfaatkan geemap dan Earth Engine Python API, dapat membantu analisis mulai dari mengumpulkan, mengolah hingga analisis akhir berbagai data, terutama mendukung data raster juga yang tersedia dalam Earth Engine Dataset.
"""

# Load Data Batas Taman Nasional Gunung Leuser.
in_shp = "WDPA_Leuser.shp"
fc = geemap.shp_to_ee(in_shp)

# Membuat Peta interaktif
m = geemap.Map(center=[3.5, 97.55], zoom=8.5)

# Menambahkan Basemap
m.add_basemap('HYBRID')

# Menampilkan Lokasi Taman Nasional Gunung Leuser
leuser_coords = ee.Geometry.Polygon(
    [[[96.7734054, 4.1118850 ],
      [98.8696981, 4.1138064 ],
      [98.8696981, 2.8763981 ],
      [96.7753268, 2.8763981 ]]])

# Menambahkan Layer Taman Nasional Gunung Leuser ke Peta
m.add_layer(fc, {'color' : "white", 'opacity': 0.9}, "Batas Taman Nasional Gunung Leuser")
m.add_layer(leuser_coords, {'color': 'red', 'opacity': 0.3}, 'Taman Nasional Gunung Leuser')
m

"""###`2. Menciptakan Peta Interaktif`

Menampilkan Taman Nasional Gunung Leuser dengan menggunakan koordinat batas kawasan tersebut. Pastikan peta menunjukkan detail **topografi** dan **vegetasi**.
"""

# Menambahkan Detail Topografi Dengan Data DEM
dem = ee.Image("USGS/SRTMGL1_003").clip(leuser_coords)

# Menambahkan Layer DEM ke Peta
vis_params = {
"min": 0,
"max": 4000,
"palette": ["006633", "E5FFCC", "662A00", "D8D8D8", "F5F5F5"],
}

m.add_layer(dem, vis_params, "Topografi")
m.add_layer(fc, {'color' : "red", 'opacity': 0.5}, "Batas Taman Nasional Gunung Leuser")
m

# Menambahkan Detail Vegetasi Dengan Menggunakan Data NDVI dari Landsat 8
landsat8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')

# Mendefinisikan Fungsi untuk NDVi
def calculate_ndvi(image):
  ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI')
  return image.addBands(ndvi)

# Menghitung NDVI
landsat8_ndvi = landsat8.map(calculate_ndvi)

latest_ndvi = landsat8_ndvi.qualityMosaic('NDVI').clip(leuser_coords)

# Menambahkan Layer NDVI ke Peta
ndvi_params = {
  'min': 0,
  'max': 1,
  'palette': ['blue', 'white', 'green']
}
m.addLayer(latest_ndvi.select('NDVI'), ndvi_params, 'Vegetasi')
m.add_layer(fc, {'color' : "red", 'opacity': 0.5}, "Batas Taman Nasional Gunung Leuser")
m

"""###`3. Mencari Katalog Data GEE:`

Mencari dataset pada GEE yang berkaitan dengan tutupan lahan dan penggunaan lahan di Taman Nasional Gunung Leuser dari tahun 2000 hingga 2020.

Dalam proses ini, dilakukan pencarian data di GEE berupa dataset yang berkaitan dengan tutupan lahan, atau dapat membantu dalam analisis tutupan lahan. Sehingga dipilih dataset yang tersedia secara global agar mencakup Taman Nasional Gunung Leuser, lalu terdapat nilai reflectance sebagai analisis permukaan, serta memilih data pada rentang tahun yang diinginkan.
"""

# Membaca List Data Dari Earth Engine Dataset
url = 'https://github.com/samapriya/Earth-Engine-Datasets-List/raw/master/gee_catalog.csv'
df = pd.read_csv(url)

# Memfilter Hanya Pada tags Yang Berkaitan Untuk Analisis Tutupan Lahan
filtered_df = df[df['tags'].str.contains( 'reflectance', 'global')]

# Memfilter Hanya Pada startyear dan endyear
filtered_df = filtered_df[(filtered_df['startyear'] <= 2000) & (df['endyear'] >= 2020)]

# Tampilkan hasil filter
print(filtered_df)

# Memilih ImageCollection Yang Akan Dipakai
print(filtered_df['id'].tolist())

"""### `4. Menampilkan Dataset GEE`

Memvisualisasikan perubahan tutupan lahan di Taman Nasional Gunung Leuser berdasarkan dataset yang  telah ditemukan.
"""

# Mengecek Band Yang Tersedia Pada Dataset
landsat7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR') \
           .filterDate('2000-01-01', '2020-12-31')
print(landsat7.first().bandNames().getInfo())

# Mendefinisikan Fungsi Untuk Mendapatkan Citra Median Per Tahun
def get_landsat_yearly_median(year):
    start_date = f'{year}-01-01'
    end_date = f'{year}-12-31'
    landsat_yearly = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR') \
        .filterBounds(leuser_coords) \
        .filterDate(start_date, end_date) \
        .filter(ee.Filter.lt('CLOUD_COVER', 20)) \
        .median() \
        .clip(leuser_coords)
    return landsat_yearly

# Membuat Peta Interaktif Untuk Dataset GEE (Landsat 7)
map = geemap.Map(center=[3.5, 97.55], zoom=8.5)

# Memvisualisasikan Datasaet GEE (Landsat 7)
landsat_vis_params = {
    'bands': ['B3', 'B2', 'B1'],  # Menggunakan band True Color (B3: Red, B2: Green, B1: Blue)
    'min': 0,
    'max': 3000,
    'gamma': 1.4,
}

# Menambahkan Citra Median Setiap Tahun (2000 hingga 2020) ke Peta
for year in range(2000, 2021):
    landsat_yearly = get_landsat_yearly_median(year)
    map.add_layer(landsat_yearly, landsat_vis_params, f'Landsat 7 {year}')

# Menambahkan Batas Kawasan Gunung Leuser
map.add_layer(fc, {'color': 'red', 'opacity': 0.3}, 'Gunung Leuser')
map

"""###`5. Mengklasifikasikan Citra Menggunakan Algoritma Machine Learning.`

Melakukan klasifikasi tutupan lahan menggunakan salah satu algoritma machine learning yang tersedia di GEE yaitu Random Forest.

Algoritma Random Forest merupakan salah satu algoritma yang biasa digunakan dalam melakukan klasifikasi, terutama kelebihannya dalam mengolah data yang beragam serta dapat dengan skala luas, atau data yang banyak. Dengan menggunakan decision tree, dapat membantu meminimalkan noise, terutama pada data citra yang memiliki could cover. Sehingga dalam analisis tutupan lahan sangat membantu untuk klasifikasi lebih baik.
"""

# Menentukan Titik Training
file_path = 'TitikSampel.csv'
df = pd.read_csv(file_path)

# Mendifinisikan Fungsi Untuk Membuat Features Dalam Dataframe
def create_feature(row):
    return ee.Feature(ee.Geometry.Point([row['longtitude'], row['latitude']]), {'landcover': row['landcover']})

# Mengkonversi Dataframe Menjadi list dari ee.Feature
features = df.apply(create_feature, axis=1).tolist()

# Membuat ee.FeatureCollection Dari List Features
Training_collection = ee.FeatureCollection(features)

# Print
print(Training_collection.getInfo())

# Membuat Peta Interaktif
map = geemap.Map(center=[df['latitude'].mean(), df['longtitude'].mean()], zoom=10)

# Menambahkan FeatureCollection ke Peta
map.add_layer(Training_collection, {'color': 'red'}, 'Sample Points')
map.add_layer(leuser_coords, {'color' : "red", 'opacity': 0.5}, "Batas Taman Nasional Gunung Leuser")
# Display the map
map

# Menambahkan titik sampel untuk setiap kelas tutupan lahan
training_samples = Training_collection

# Ekstrak nilai pixel untuk titik sampel
training = landsat_yearly.sampleRegions(
     collection=training_samples,
     properties=['landcover'],
     scale=30
  )

# Inisialisasi algoritma Random Forest
classifier = ee.Classifier.smileRandomForest(numberOfTrees=100).train(
     features=training,
     classProperty='landcover',
     inputProperties=landsat_yearly.bandNames()
  )

# Membuat peta terpisah untuk setiap tahun
map_year = geemap.Map(center=[3.8, 97.3], zoom=10)

# Loop untuk setiap tahun
for year in range(2000, 2021):
    # Dapatkan citra median untuk tahun tertentu
    landsat_yearly = get_landsat_yearly_median(year)

    # Terapkan model ke citra
    classified = landsat_yearly.classify(classifier)

    # Tambahkan hasil klasifikasi ke peta tahun ini
    map_year.addLayer(classified, {'min': 0, 'max': 2, 'palette': ['yellow', 'green', 'blue']}, f'Classified {year}')

    # Menambahkan batas kawasan Gunung Leuser
    map_year.addLayer(fc, {'color': 'red', 'opacity': 0.3}, 'Batas Taman Nasional Gunung Leuser')

# Menambahkan batas kawasan Gunung Leuser
map_year.addLayer(fc, {'color': 'red', 'opacity': 0.5}, 'Batas Taman Nasional Gunung Leuser')
map_year

"""###`6. Menghitung Statistik dan Mengekspor Hasil:`

Menghitung statistik perubahan tutupan lahan di kawasan tersebut dan ekspor hasilnya dalam format yang dapat dibagikan.
"""

# Menghitung statistik perubahan tutupan lahan
stats = classified.reduceRegion(
    reducer=ee.Reducer.frequencyHistogram(),
    geometry=leuser_coords,
    scale=500,
    maxPixels=1e8
)
print('Landcover statistics:', stats.getInfo())

# Mengumpulkan data yang diperlukan
geometry = leuser_coords
training_samples = Training_collection

# Membuat dictionary untuk menyimpan hasil area setiap tahun
area_dict = {'year': [], 'class_0': [], 'class_1': [], 'class_2': []}

# Ekstrak nilai pixel untuk titik sampel
training = landsat_yearly.sampleRegions(
     collection=training_samples,
     properties=['landcover'],
     scale=30
  )

# Inisialisasi algoritma Random Forest
classifier = ee.Classifier.smileRandomForest(numberOfTrees=100).train(
     features=training,
     classProperty='landcover',
     inputProperties=landsat_yearly.bandNames()
  )

# Loop untuk setiap tahun
for year in range(2000, 2021):
    # Dapatkan citra median untuk tahun tertentu
    landsat_yearly = get_landsat_yearly_median(year)

    # Terapkan model ke citra
    classified = landsat_yearly.classify(classifier)
    # Hitung area untuk setiap kelas
    area_stats = classified.reduceRegion(
        reducer=ee.Reducer.frequencyHistogram(),
        geometry=geometry,
        scale=30,
        maxPixels=1e9
    ).getInfo()

    # Ambil total area per kelas
    class_areas = area_stats['classification']

    # Menambahkan hasil ke dictionary
    area_dict['year'].append(year)
    area_dict['class_0'].append(class_areas.get('0'))
    area_dict['class_1'].append(class_areas.get('1'))
    area_dict['class_2'].append(class_areas.get('2'))

print(area_dict)

# Mengubah dictionary ke DataFrame
df = pd.DataFrame(area_dict)

# Plot line chart menggunakan matplotlib
plt.figure(figsize=(10, 6))
plt.plot(df['year'], df['class_0'], label='Lahan Terbuka', marker='o')
plt.plot(df['year'], df['class_1'], label='Vegetasi', marker='o')
plt.plot(df['year'], df['class_2'], label='Badan Air', marker='o')
plt.xlabel('Tahun')
plt.ylabel('Luas (Pixel)')
plt.title('Perubahan Tutupan Lahan Dari Tahun 2000-2020 di Taman Nasional Gunung Leuser')
plt.xticks(df['year'], rotation=45)
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""###`7. Menghasilkan Peta Kualitas Publikasi:`

Membuat sebuah peta dinamik yang menunjukkan perubahan tutupan lahan di Taman Nasional Gunung Leuser dari tahun 2000 hingga 2020.
"""

d = geemap.Map()
roi = leuser_coords
d.add_layer(roi)
d.center_object(roi)
d

# Fungsi untuk mendapatkan citra median tahunan
def get_landsat_yearly_median(year):
    start_date = f'{year}-01-01'
    end_date = f'{year}-12-31'
    collection = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA') \
        .filterDate(start_date, end_date) \
        .filterBounds(roi) \
        .median() \
        .clip(roi)
    return collection

# Buat peta interaktif
Map = geemap.Map(center=[3.8, 97.3], zoom=10)

# Tampilkan peta
Map.addLayer(roi, {}, 'ROI')

# Tampilkan peta dinamis dengan citra Landsat untuk tahun tertentu
landsat_n = get_landsat_yearly_median(2000)
Map.addLayer(landsat_n, {'bands': ['B3', 'B2', 'B1'], 'min': 0, 'max': 0.3}, 'Landsat 2000')

# Tampilkan kontrol waktu
Map.add_time_slider(landsat_n, label="Year", time_interval=1)

# Tampilkan peta
Map

"""Timelapse"""

#  Ekstrak nilai pixel untuk titik sampel
training = landsat_yearly.sampleRegions(
     collection=training_samples,
     properties=['landcover'],
     scale=30
  )

# Inisialisasi algoritma Random Forest
classifier = ee.Classifier.smileRandomForest(numberOfTrees=100).train(
     features=training,
     classProperty='landcover',
     inputProperties=landsat_yearly.bandNames()
  )

# Buat koleksi citra hasil klasifikasi tahunan
classified_images = []

# Loop untuk setiap tahun
for year in range(2000, 2021):
    # Dapatkan citra median untuk tahun tertentu
    landsat_yearly = get_landsat_yearly_median(year)

    # Terapkan model ke citra
    classified = landsat_yearly.classify(classifier)
    classified_images.append(classified.set('year', year))

# Gabungkan citra hasil klasifikasi menjadi koleksi
classified_collection = ee.ImageCollection(classified_images)

# Fungsi untuk membuat gambar dengan label tahun
def add_year_label(image):
    year = ee.Number(image.get('year')).format('%d')
    return image.visualize(min=0, max=2, palette=['yellow', 'green', 'blue']) \
        .set({'label': year})

# Tambahkan label tahun ke setiap citra dalam koleksi
classified_with_labels = classified_collection.map(add_year_label)

# Buat timelapse dari koleksi citra dengan label tahun
out_gif = "landcover_TNGL.gif"


# Tampilkan timelapse
geemap.show_image(out_gif)

"""###`8. Mengekstraksi Lebar dan Garis Tengah Sungai:`

Menggunakan GEE untuk mengekstrak informasi mengenai lebar dan garis tengah dari salah satu sungai utama di Taman Nasional Gunung Leuser.

Metode yang digunakan adalah Normalized Difference Water Index (NDWI) yang digunakan untuk identifikasi wilayah perairan atau kandungan air melalui citra. Sehingga dapat dimanfaatkan dalam menganalisis sungai untuk mengetahui garis tengah sungai dan lebarnya, yang mana berbatasan dengan dengan daratan/tanah yang cenderung berbeda kandungan airnya dengan sungai. Maka dari itu, metode ini cocok untuk digunakan.
"""

# Tentukan area studi di Taman Nasional Gunung Leuser
study_area = fc

# Mengambil citra Landsat untuk analisis
landsat = ee.ImageCollection('LANDSAT/LC08/C01/T1') \
  .filterBounds(study_area) \
  .filterDate('2019-01-01', '2019-12-31') \
  .median()

# Memfilter area air menggunakan indeks NDWI
ndwi = landsat.normalizedDifference(['B3', 'B5'])
water_mask = ndwi.gt(0.2)

# Menemukan tepi sungai menggunakan algoritma Canny
canny_edges = ee.Algorithms.CannyEdgeDetector(ndwi, 0.5)

# Mendefinisikan kernel untuk dilasi dan erosi
dilated = canny_edges.focal_max(1)
eroded = dilated.focal_min(1)

# Konversi Study_area menjadi citra biner
binary_eroded = eroded.gt(0.2).rename('binary_eroded')

# Identifikasi garis tengah sungai
river_centerline = binary_eroded.reduceToVectors(
    geometry=study_area,
    scale=30,
    geometryType='centroid'
)

# Menghitung lebar sungai
river_width = binary_eroded.reduceRegion(
    reducer=ee.Reducer.minMax(),
    geometry=river_centerline.geometry().buffer(30), # buffer untuk memperbesar area
    scale=30,
    bestEffort=True
)

# Print hasil
print("Garis Tengah Sungai:", river_centerline.getInfo())
print("Lebar Sungai (meter):", river_width.getInfo())

# Visualisasi
Maps = geemap.Map(location=[3.8, 97.3], zoom_start=9)

Maps.add_layer(river_centerline, {'color': 'blue'}, "Garis Tengah Sungai")
Maps.add_layer(water_mask, {'palette': 'blue'}, "Area Air")
Maps

"""##**ANALYSIS**

Hasil menunjukkan bahwa setiap tahun selalu terjadi penurunan dan peningkatan berbagai tutupan lahan, dan seiring waktu hal tersebut semakin mengurangi kawasan Taman Nasional Gunung Leuser yang alami akibat transformasi atau perubahan yang terjadi.

Maka dari itu, dengan mengetahui tutupan lahan, kita juga mengetahui fitur lain yang berubah ataupun keberadaannya dapat terdeteksi oleh Citra Satelit. Diantaranya yaitu garis tengah sungai untuk melihat panjang sungai yang ada dikawasan tersebut, serta mengetahui lebar sungai, untuk mengetahui apakah terjadi pelebaran atau pengecilan.

Namun, dataset yang ada masih sangat terbatas karena masih banyak noise oleh awan dan menutupi sebagian wilayah di kawasan Taman Nasional Gunung Leuser. Sehingga kedepannya diharapkan, dataset yang memiliki data lebih baik dapat dimanfaatkan dan dimaksimalkan produksi dan penggunaannya.
"""